generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id
  name          String
  email         String         @unique
  emailVerified Boolean        @default(false)
  image         String?
  userType      UserType?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  bio           String?
  companyName   String?
  facebookUrl   String?
  linkedinUrl   String?
  phone         String?
  websiteUrl    String?
  chatMessages  ChatMessage[]
  accounts      Account[]
  bounties        Bounty[]
  bountyNotes   BountyNote[]
  notifications Notification[]
  recruiter     Recruiter?
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Recruiter {
  id             String                   @id @default(cuid())
  userId         String                   @unique
  bio            String?
  experience     String?
  specialties    String?
  createdAt      DateTime                 @default(now())
  updatedAt      DateTime                 @updatedAt
  payouts        Payout[]
  user           User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  collaborations RecruiterCollaboration[]
  submissions    Submission[]

  @@map("recruiter")
}

model Bounty {
  id                 String                   @id @default(cuid())
  title              String
  description        String
  payoutType         PayoutType
  payoutAmount       Float?
  payoutPercentage   Float?
  guaranteeTimeframe GuaranteeTimeframe
  deadline           DateTime?
  requirements       String
  interviewProcess   String?
  guidelines         String?
  status             BountyStatus             @default(OPEN)
  formFields         Json?
  salaryMin          Float?
  salaryMax          Float?
  tallyFormId        String?
  tallyFormUrl       String?
  tallyFormPassword  String?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  picture            String?
  userId             String
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  notes              BountyNote[]
  payouts            Payout[]
  collaborations     RecruiterCollaboration[]
  submissions        Submission[]

  @@map("bounty")
}

model RecruiterCollaboration {
  id              String       @id @default(cuid())
  bountyId        String
  recruiterId     String
  isUnlocked      Boolean      @default(false)
  message         String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  introduction    String?
  rejectionReason String?
  reviewedAt      DateTime?
  reviewedBy      String?
  status          String       @default("PENDING")
  chat            Chat?
  bounty          Bounty       @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  recruiter       Recruiter    @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  submissions     Submission[]

  @@unique([bountyId, recruiterId])
  @@map("recruiter_collaboration")
}

model Chat {
  id              String                 @id @default(cuid())
  collaborationId String                 @unique
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  collaboration   RecruiterCollaboration @relation(fields: [collaborationId], references: [id])
  messages        ChatMessage[]
}

model ChatMessage {
  id        String   @id @default(cuid())
  chatId    String
  senderId  String
  message   String
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model BountyNote {
  id        String   @id @default(cuid())
  bountyId  String
  userId    String
  content   String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bounty    Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("bounty_note")
}

model Submission {
  id              String                  @id @default(cuid())
  bountyId        String
  recruiterId     String
  candidateName   String
  candidateEmail  String?
  formData        Json
  status          SubmissionStatus        @default(PENDING)
  feedback        String?
  isHired         Boolean                 @default(false)
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  collaborationId String?
  bounty          Bounty                  @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  collaboration   RecruiterCollaboration? @relation(fields: [collaborationId], references: [id])
  recruiter       Recruiter               @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  files           SubmissionFile[]

  @@map("submission")
}

model SubmissionFile {
  id           String     @id @default(cuid())
  submissionId String
  fileName     String
  fileSize     Int
  fileType     String
  filePath     String
  uploadedAt   DateTime   @default(now())
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@map("submission_file")
}

model Payout {
  id          String    @id @default(cuid())
  bountyId    String
  recruiterId String
  amount      Float
  currency    String    @default("USD")
  isPaid      Boolean   @default(false)
  paidAt      DateTime?
  dueDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  bounty      Bounty    @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)

  @@map("payout")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum UserType {
  COMPANY
  RECRUITER
}

enum PayoutType {
  CASH
  PERCENTAGE
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum GuaranteeTimeframe {
  ONE_MONTH
  TWO_MONTHS
}

enum NotificationType {
  PARTNERSHIP_REQUEST
  PARTNERSHIP_APPROVED
  PARTNERSHIP_REJECTED
}
