// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  COMPANY
  RECRUITER
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  userType      UserType  @default(COMPANY)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  
  company       Company?
  recruiter     Recruiter?
  bountyNotes   BountyNote[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum PayoutType {
  CASH
  PERCENTAGE
}

enum BountyStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SubmissionStatus {
  PENDING
  REVIEWED
  ACCEPTED
  REJECTED
}

enum GuaranteeTimeframe {
  ONE_MONTH
  TWO_MONTHS
}

model Company {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName String
  description String?
  website     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  bounties    Bounty[]
  
  @@map("company")
}

model Recruiter {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio         String?
  experience  String?
  specialties String?  // Comma-separated values for SQLite
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  collaborations RecruiterCollaboration[]
  submissions    Submission[]
  payouts        Payout[]
  
  @@map("recruiter")
}

model Bounty {
  id                  String              @id @default(cuid())
  title               String
  description         String
  companyId           String
  company             Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  payoutType          PayoutType
  payoutAmount        Float?              // For cash payouts
  payoutPercentage    Float?              // For percentage payouts
  guaranteeTimeframe  GuaranteeTimeframe
  deadline            DateTime?
  requirements        String              // JSON string of hard requirements
  interviewProcess    String?
  guidelines          String?
  status              BountyStatus        @default(OPEN)
  formFields          Json?               // Dynamic form fields for submissions
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  
  collaborations      RecruiterCollaboration[]
  submissions         Submission[]
  notes               BountyNote[]
  payouts             Payout[]
  
  @@map("bounty")
}

model RecruiterCollaboration {
  id          String   @id @default(cuid())
  bountyId    String
  bounty      Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  recruiterId String
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  isUnlocked  Boolean  @default(false) // Company unlocks submission access
  message     String?  // Initial interest message
  submissions Submission[] // Submissions made through this collaboration
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([bountyId, recruiterId])
  @@map("recruiter_collaboration")
}

model BountyNote {
  id        String   @id @default(cuid())
  bountyId  String
  bounty    Bounty   @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  content   String
  isPublic  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("bounty_note")
}

model Submission {
  id            String           @id @default(cuid())
  bountyId      String
  bounty        Bounty           @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  recruiterId   String
  recruiter     Recruiter        @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  collaborationId String?
  collaboration RecruiterCollaboration? @relation(fields: [collaborationId], references: [id], onDelete: SetNull)
  candidateName String
  candidateEmail String?
  formData      Json             // Submitted form data
  files         SubmissionFile[]
  status        SubmissionStatus @default(PENDING)
  feedback      String?
  isHired       Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("submission")
}

model SubmissionFile {
  id           String     @id @default(cuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  fileName     String
  fileSize     Int
  fileType     String
  filePath     String     // Storage path
  uploadedAt   DateTime   @default(now())
  
  @@map("submission_file")
}

model Payout {
  id          String    @id @default(cuid())
  bountyId    String
  bounty      Bounty    @relation(fields: [bountyId], references: [id], onDelete: Cascade)
  recruiterId String
  recruiter   Recruiter @relation(fields: [recruiterId], references: [id], onDelete: Cascade)
  amount      Float
  currency    String    @default("USD")
  isPaid      Boolean   @default(false)
  paidAt      DateTime?
  dueDate     DateTime  // Based on guarantee timeframe
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("payout")
}
